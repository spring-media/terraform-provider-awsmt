package awsmt

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/mediatailor"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"os"
	"time"
)

var (
	_ provider.Provider = &awsmtProvider{}
)

func New() provider.Provider {
	return &awsmtProvider{}
}

type awsmtProvider struct{}

type awsmtProviderModel struct {
	Profile          types.String `tfsdk:"profile"`
	Region           types.String `tfsdk:"region"`
	MaxRetryAttempts types.Int64  `tfsdk:"max_retry_attempts"`
}

func (p *awsmtProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "awsmt"
}

func (p *awsmtProvider) Schema(_ context.Context, _ provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"profile": schema.StringAttribute{
				Optional:    true,
				Description: "The profile generated by the SSO login. You can find the profile(s) name in '~/.aws/config'. SSO login will not be used if the profile name is not specified and no environmental variable called 'aws_profile' is found.",
			},
			"region": schema.StringAttribute{
				Optional:    true,
				Description: "AWS region. defaults to 'eu-central-1'.",
			},
			"max_retry_attempts": schema.Int64Attribute{
				Optional:    true,
				Description: "The maximum number of times the provider will retry a failed aws operation. Defaults to 10",
			},
		},
	}
}

func (p *awsmtProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	tflog.Info(ctx, "Configuring AWS MediaTailor client")

	var providerConfig awsmtProviderModel
	diags := req.Config.Get(ctx, &providerConfig)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var region = "eu-central-1"
	var profile = ""
	var maxAttempts = 10

	var err error
	// New sdk version creation
	var cfg aws.Config

	if !providerConfig.Region.IsUnknown() || !providerConfig.Region.IsNull() {
		region = providerConfig.Region.ValueString()
	}
	if providerConfig.Profile.IsUnknown() || providerConfig.Profile.IsNull() || providerConfig.Profile.ValueString() == "" {
		if os.Getenv("AWS_PROFILE") != "" {
			profile = os.Getenv("AWS_PROFILE")
		}
	} else {
		profile = providerConfig.Profile.ValueString()
	}
	if !providerConfig.MaxRetryAttempts.IsUnknown() || !providerConfig.MaxRetryAttempts.IsNull() {
		maxAttempts = int(providerConfig.MaxRetryAttempts.ValueInt64())
	}
	tflog.Debug(ctx, "Creating AWS client session")
	cfg, err = p.getClientConfig(ctx, region, profile, maxAttempts)
	if err != nil {
		resp.Diagnostics.AddError("Failed to Initialize Provider in Region", "unable to initialize provider in the specified region: "+err.Error())
		return
	}

	c := mediatailor.NewFromConfig(cfg)

	resp.DataSourceData = c
	resp.ResourceData = c

	tflog.Info(ctx, "AWS MediaTailor client configured", map[string]any{"success": true})
}

func (p *awsmtProvider) getClientConfig(ctx context.Context, region, profile string, maxAttempts int) (aws.Config, error) {
	backoff := customBackoff{
		minDelay: 500 * time.Millisecond,
	}
	retryer := retry.NewStandard(func(o *retry.StandardOptions) {
		o.Backoff = backoff
		o.MaxAttempts = maxAttempts
		o.MaxBackoff = 10 * time.Second
	})

	var optFns []func(*config.LoadOptions) error
	optFns = append(optFns, config.WithRegion(region))
	optFns = append(optFns, config.WithRetryer(func() aws.Retryer {
		return retryer
	}))
	if profile != "" {
		optFns = append(optFns, config.WithSharedConfigProfile(profile))
	}

	return config.LoadDefaultConfig(ctx, optFns...)
}

func (p *awsmtProvider) DataSources(_ context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		DataSourceChannel,
		DataSourceSourceLocation,
		DataSourcePlaybackConfiguration,
		DataSourceLiveSource,
		DataSourceVodSource,
	}

}

func (p *awsmtProvider) Resources(_ context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		ResourceChannel,
		ResourceSourceLocation,
		ResourcePlaybackConfiguration,
		ResourceLiveSource,
		ResourceVodSource,
	}
}

type customBackoff struct {
	minDelay time.Duration
}

func (b customBackoff) BackoffDelay(attempt int, err error) (time.Duration, error) {
	jb := retry.NewExponentialJitterBackoff(10 * time.Second)
	standardDelay, stdErr := jb.BackoffDelay(attempt, err)
	if stdErr != nil {
		return 0, stdErr
	}
	return max(standardDelay, b.minDelay), nil
}
